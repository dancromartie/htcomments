#!/usr/bin/python

import argparse
import collections
import os
import re
import subprocess
import sys

TAG_DIRECTIVE = "tag"
INCLUDE_DIRECTIVE = "include"
EXCLUDE_DIRECTIVE = "exclude"
VALID_DIRECTIVES = [INCLUDE_DIRECTIVE, TAG_DIRECTIVE, EXCLUDE_DIRECTIVE]
NUM_LINES_CONTEXT = 3


def get_repo_root():
    root_dir_output = subprocess.check_output(
        ["git",  "rev-parse", "--show-toplevel"])
    root_dir = root_dir_output.decode("utf-8").strip()
    return root_dir


def parse_htcomments_config():
    valid_tag_regex = r'^#ht_[a-z0-9_]+$'
    ht_config_path = get_repo_root() + "/.htcomments"
    tags = []
    include_patterns = []
    exclude_patterns = []
    with open(ht_config_path, "r") as f:
        ht_config_lines = f.readlines()
        for line in ht_config_lines:
            line = line.strip()
            splitup = re.split(r' ', line, 2)
            directive = splitup[0]
            if directive not in VALID_DIRECTIVES:
                sys.exit("Found config line starting with invalid directive: '%s'" % directive)
            if directive == TAG_DIRECTIVE:
                tag_name = splitup[1]
                if not re.match(valid_tag_regex, tag_name):
                    sys.exit("Found bad tag %s.  Must match regex %s" % (tag_name, valid_tag_regex))
                try:
                    tag_explanation = splitup[2]
                except IndexError:
                    sys.exit("Tag explanation for tag %s was emtpy" % tag_name)
                if not tag_name.startswith("#ht"):
                    sys.exit("Tag '%s' does not start with #ht" % tag_name)
                tags.append({"name": tag_name, "explanation": tag_explanation})
            if directive == INCLUDE_DIRECTIVE:
                include_pattern = line.strip().split(' ', 1)[1]
                if re.match(r'"|\'', include_pattern):
                    sys.exit("Regex should not start with quotes.  Anchor it if you must.")
                try:
                    re.compile(include_pattern)
                except:
                    print("Could not compile regex for include pattern '%s'" % include_pattern)
                    raise
                include_patterns.append(include_pattern)
            if directive == EXCLUDE_DIRECTIVE:
                exclude_pattern = line.strip().split(' ', 1)[1]
                try:
                    re.compile(exclude_pattern)
                except:
                    print("Could not compile regex for exclude pattern '%s'" % exclude_pattern)
                    raise
                exclude_patterns.append(exclude_pattern)

    tags.sort(key=lambda x: x['name'])
    return include_patterns, exclude_patterns, tags


def get_all_tags_in_code():
    grep_command = "git grep '#ht' %s | egrep -o '#ht\w+' | grep -v '#https'" \
        % get_repo_root()
    all_tags_found_in_code = subprocess.check_output(grep_command, shell=True)
    all_tags_found_in_code = all_tags_found_in_code.decode("utf-8").split("\n")
    return [x.strip() for x in all_tags_found_in_code if x.strip()]
    

def find_matching_files(include_patterns, exclude_patterns):
    files_to_search = set()
    for root, dirs, files in os.walk(get_repo_root()):
        for file in files:
            excluded_by_pattern = None
            included_by_pattern = None
            full_path = os.path.join(root, file)
            for exclude_pattern in exclude_patterns:
                if re.search(exclude_pattern, full_path):
                    excluded_by_pattern = True

            if not excluded_by_pattern:
                for include_pattern in include_patterns:
                    if re.search(include_pattern, full_path):
                        included_by_pattern = True

            if included_by_pattern and excluded_by_pattern:
                sys.exit("File %s was both included and excluded by patterns." % full_path)

            if included_by_pattern and not excluded_by_pattern:
                files_to_search.add(full_path)
    return files_to_search


def find_tag_snippets(include_patterns, exclude_patterns, registered_tag_names):
    files_to_search = find_matching_files(include_patterns, exclude_patterns)
    tags_found = []
    snippets = []

    for file in files_to_search:
        with open(file, "r") as f:
            line_counter = 0
            file_text = f.read()
            # .read exhausts something, so seek back to the beginning
            f.seek(0)
            file_lines = f.readlines()
            tags_in_file = set(re.findall("#ht\S+", file_text))\
                .intersection(registered_tag_names)
            for line in file_lines:
                for tag in tags_in_file:
                    tags_in_this_line = re.findall(
                        r'%s' % tag, line, re.DOTALL|re.MULTILINE)
                    for result in tags_in_this_line:
                        line_range_lower = max(0, line_counter - NUM_LINES_CONTEXT)
                        line_range_upper = min(len(file_lines), line_counter + NUM_LINES_CONTEXT + 1)
                        context_lines = file_lines[line_range_lower:line_range_upper]
                        context_range = range(line_range_lower, line_range_upper)
                        numbered_lines = [
                            str(num + 1) + cl for num, cl in zip(context_range, context_lines)
                        ]
                        # Newline already included
                        context = "".join(numbered_lines)
                        snippets.append({
                            "tag": tag,
                            "text": context,
                            "file": file,
                            "start_line": line_counter + 1
                        })
                line_counter += 1
    return snippets


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', required=False, action='store_true', help='count by tag')
    parser.add_argument('-l', action='store_true', help='list registered tags and explanations')
    parser.add_argument('-o', required=False, action='store_true', help='open results in pager')
    parser.add_argument('-t', required=False, help='tag to search.  pound sign optional')
    parser.add_argument('-v', required=False, action='store_true', help='validate tags in codebase')
    #parser.add_argument('-g', required=False, help='act globally / multi-repo mode')
    args = parser.parse_args()

    include_patterns, exclude_patterns, registered_tags = parse_htcomments_config()
    registered_tag_names = [t['name'] for t in registered_tags]

    if args.t:
        # Want to allow people to search for tags on the commandline without typing in the '#'
        # The '#' will look like a comment and typing single quotes is annoying
        if not args.t.startswith("#"):
            args.t = "#" + args.t
        
        if args.t not in registered_tag_names:
            sys.exit("Searched tag '%s' is not in registered tags" % args.t)

    if args.l:
        for tag in registered_tags:
            print(tag["name"] + " " + tag["explanation"])
        sys.exit(0)

    if args.v:
        # TODO make this respect the include patterns?
        all_tags_found_in_code = set(get_all_tags_in_code())
        for t in all_tags_found_in_code:
            if t not in registered_tag_names:
                sys.exit("Tag %s was found in code but not in registered tags. Update .htcomments" \
                    % t)
        sys.exit(0)

    if args.c:
        # TODO make this respect the include patterns?
        all_tags_found_in_code = get_all_tags_in_code()
        counter = collections.Counter(all_tags_found_in_code)
        most_common = counter.most_common()
        for tag, count in most_common:
            print("%s %s" % (tag, count))
        sys.exit(0)

    snippets = find_tag_snippets(include_patterns, exclude_patterns, registered_tag_names)
    for snippet in snippets:
        tag = snippet["tag"]
        if tag not in registered_tag_names:
            sys.exit("Tag %s was found but is not in registered tags." % tag)

    for snippet in snippets:
        tag = snippet["tag"]
        if args.t and tag != args.t:
            continue
        text = snippet["text"]
        file = snippet["file"]
        if args.o:
            start_line_arg = "+%s" % snippet["start_line"]
            subprocess.call(["less", start_line_arg, "-N", file])
        else:
            print("*" * 20 + tag + ": " + file + "*" * 20)
            print(text)
            print()
        



if __name__ == "__main__":
    main()
